import sys

class Graph:
    def __init__(self, vertices):
        self.V= vertices
        self.graph=[[0 for i in range(vertices)] for j in range(vertices)]
            
    
    def minimum(self,dist,visited):
        min= sys.maxsize
        for i in range(self.V):
            if(min>dist[i] and visited[i]==False):
                min=dist[i]
                min_ind=i
        return min_ind
            
    def dijkstra(self,src,dest):
        dist= [0]* self.V
        visited= [False]* self.V
        parent=[0]* self.V
        for i in range(self.V):
            dist[i]= sys.maxsize
            
        dist[src]=0
        
        for i in range(self.V):
            u=self.minimum(dist,visited)
            visited[u]= True
            
            for v in range(self.V):
                if(self.graph[u][v]>0 and visited[v]!=True and dist[v]>dist[u]+self.graph[u][v]):
                    dist[v]=dist[u]+self.graph[u][v]
                    parent[v]=u
                        
            if(u==dest):
                break
        print(dist[dest])
        i=dest
        l1=[]
        l1.append(i)
        while(i!=parent[i]):
            l1.append(parent[i])
            i=parent[i]
        print(" ".join(str(i) for i in l1)[::-1])

t=int(input())

while(t>0):
    vertices= int(input())

    g = Graph(vertices) 
    l=[]
    for i in range(vertices):
        l.append([int(i) for i in input().split()])
    g.graph=l  
    src,dest= map(int,input().split())
    #print(src,dest)
    g.dijkstra(src,dest); 
    t-=1
  
            
